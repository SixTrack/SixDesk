#!/bin/bash
# Special run_results for BNL
# See if we have any results and download them
# uses a lock on the Study
# A new subroutine to update mydatabase......
update_cases()
{
  #We now make the new mycompleted_cases amd myincomplete_cases
  # using the new completed_this_run file (or left over from a
  # previous run_results which was killed for some reason).
  touch $sixdeskwork/completed_this_run

#MACRO mymktmp newccases $sixdeskwork
  sixdesktmpname=newccases
  sixdesktmpdirarg=$sixdeskwork
  sixdeskmktmp
  newccases=$sixdesktmp
#MACRO mymktmp


#MACRO mymktmp newicases $sixdeskwork
  sixdesktmpname=newicases
  sixdesktmpdirarg=$sixdeskwork
  sixdeskmktmp
  newicases=$sixdesktmp
#MACRO mymktmp

  cat $sixdeskwork/mycompleted_cases $sixdeskwork/completed_this_run > $newccases
  sort --unique $newccases > $sixdeskwork/mycompleted_cases
  rm $newccases
  rm -f $sixdeskwork/sedscript.sed
  touch $sixdeskwork/sedscript.sed
  while read mycase
  do
  #make a sed script
    echo '/^'$mycase'$/d' >> $sixdeskwork/sedscript.sed
  done < $sixdeskwork/completed_this_run
  sed -f $sixdeskwork/sedscript.sed $sixdeskwork/myincomplete_cases > $newicases
  cp $newicases $sixdeskwork/myincomplete_cases
  rm -f $newicases
  rm -f $sixdeskwork/completed_this_run
  # and make another report

#MACRO mymess 2 Due to an AFS/Linux bug we maintain another database
  sixdeskmesslevel=2
  sixdeskmess="Due to an AFS/Linux bug we maintain another database"
  sixdeskmess
#MACRO mymess


#MACRO mymess 2 with the files myincomplete_cases and mycompleted_cases
  sixdeskmesslevel=2
  sixdeskmess="with the files myincomplete_cases and mycompleted_cases"
  sixdeskmess
#MACRO mymess


#MACRO mymess 2 to help find the problem
  sixdeskmesslevel=2
  sixdeskmess="to help find the problem"
  sixdeskmess
#MACRO mymess

  icases=0
  if test -s $sixdeskwork/myincomplete_cases
  then
    icases=`wc -l $sixdeskwork/myincomplete_cases`
    icases=`echo $icases | sed -e 's? *\([0-9]*\).*?\1?'`
  fi
  ccases=0
  if test -s $sixdeskwork/mycompleted_cases
  then
    ccases=`wc -l $sixdeskwork/mycompleted_cases`
    ccases=`echo $ccases | sed -e 's? *\([0-9]*\).*?\1?'`
  fi

#MACRO mymess 1 Before/after this download $cases mycases, $ccases complete ($icases incomplete)
  sixdeskmesslevel=1
  sixdeskmess="Before/after this download $cases mycases, $ccases complete ($icases incomplete)"
  sixdeskmess
#MACRO mymess

}
# If called with a Study ($1) and a Platform ($2)
# we now use dot_env 

# ------------------------------------------------------------------------------
# preliminary to any action
# ------------------------------------------------------------------------------
# - get path to scripts (normalised)
if [ -z "${SCRIPTDIR}" ] ; then
    SCRIPTDIR=`dirname $0`
    SCRIPTDIR="`cd ${SCRIPTDIR};pwd`"
    export SCRIPTDIR=`dirname ${SCRIPTDIR}`
fi
# ------------------------------------------------------------------------------

source ${SCRIPTDIR}/bash/dot_env
# and now we can define our arrays
# Declare our new BNL arrays
declare -a bfiles
declare -a bforts
bnlfiles="title.dat beambeam-output.dat beambeam-lostID.dat SixTwiss.dat checkdist.dat"
bnlforts="fort.10 fort.52 fort.53 fort.51 fort.97"
bfiles=($bnlfiles)
bforts=($bnlforts)
if test -s $sixdeskstudy/sixdesklock
then
  if test ! -w $sixdeskstudy/sixdesklock
  then
    echo "The Study $sixdeskstudy sixdesklock is ON; giving up!"

#MACRO myexit 0
    sixdeskexitparam=0
    sixdeskexit
#MACRO myexit

  fi
fi
if test "$BNL" = ""  
then

#MACRO mymess 0 The BNL flag must be set in sixdeskenv!
  sixdeskmesslevel=0
  sixdeskmess="The BNL flag must be set in sixdeskenv!"
  sixdeskmess
#MACRO mymess


#MACRO myexit 1
  sixdeskexitparam=1
  sixdeskexit
#MACRO myexit

fi

#MACRO mylock $sixdeskstudy
sixdesklockdir=$sixdeskstudy
sixdesklock
#MACRO mylock


#MACRO mymess 0 Starting in Workspace $workspace, Study `basename $sixdeskstudy`, Platform $sixdeskplatform
sixdeskmesslevel=0
sixdeskmess="Starting in Workspace $workspace, Study `basename $sixdeskstudy`, Platform $sixdeskplatform"
sixdeskmess
#MACRO mymess


#MACRO mymess 0 Using sixdesk.log in $sixdesklogdir
sixdeskmesslevel=0
sixdeskmess="Using sixdesk.log in $sixdesklogdir"
sixdeskmess
#MACRO mymess


if test $sixdeskplatform = "lsf"
then
  echo "This command is not available for LSF jobs!!!"

#MACRO myunlock $sixdeskstudy
  sixdesklockdir=$sixdeskstudy
  sixdeskunlock
#MACRO myunlock


#MACRO myexit 0
  sixdeskexitparam=0
  sixdeskexit
#MACRO myexit

fi

# Now update my database if a completed_this_run file exists froma previous run
if test -s $sixdeskwork/completed_this_run
then

#MACRO mylock $sixdeskwork
###  sixdesklockdir=$sixdeskwork
###  sixdesklock
#MACRO mylock

  update_cases

#MACRO myunlock $sixdeskwork
###  sixdesklockdir=$sixdeskwork
###  sixdeskunlock
#MACRO myunlock

fi
# Get the counts before we run for checking later

#MACRO mylock $sixdeskwork
sixdesklockdir=$sixdeskwork
sixdesklock
#MACRO mylock

if test -f $sixdeskwork/taskids
then
  cases=`wc -l "$sixdeskwork/taskids"`
  cases=`echo "$cases" | sed -e 's? *\([0-9]*\).*?\1?'`
fi
icases=0
if test -s $sixdeskwork/incomplete_cases
then
  icases=`wc -l $sixdeskwork/incomplete_cases`
  icases=`echo $icases | sed -e 's? *\([0-9]*\).*?\1?'`
fi
ccases=0
if test -s $sixdeskwork/completed_cases
then
  ccases=`wc -l $sixdeskwork/completed_cases`
  ccases=`echo $ccases | sed -e 's? *\([0-9]*\).*?\1?'`
fi

#MACRO myunlock $sixdeskwork
###sixdesklockdir=$sixdeskwork
###sixdeskunlock
#MACRO myunlock



#MACRO mymess 0 Running on `hostname`
sixdeskmesslevel=0
sixdeskmess="Running on `hostname`"
sixdeskmess
#MACRO mymess

IDS=$sixdeskwork
mkdir -p $sixdeskjobs

#MACRO mymktmp tmp $sixdeskjobs
sixdesktmpname=tmp
sixdesktmpdirarg=$sixdeskjobs
sixdeskmktmp
tmp=$sixdesktmp
#MACRO mymktmp


#MACRO mymktmp sixdesktasklist $sixdeskjobs
sixdesktmpname=sixdesktasklist
sixdesktmpdirarg=$sixdeskjobs
sixdeskmktmp
sixdesktasklist=$sixdesktmp
#MACRO mymktmp

if test $sixdeskplatform = "cpss"
then
  if test ! -s $sixdeskstudy/TaskGroupId
  then
    rm $tmp
    rm $sixdesktasklist

#MACRO mymess 0 No TaskGroup exists for CPSS.
    sixdeskmesslevel=0
    sixdeskmess="No TaskGroup exists for CPSS."
    sixdeskmess
#MACRO mymess


#MACRO myunlock $sixdeskstudy
    sixdesklockdir=$sixdeskstudy
    sixdeskunlock
#MACRO myunlock


#MACRO myexit 0
    sixdeskexitparam=0
    sixdeskexit
#MACRO myexit

  fi
  tgid=`cat $sixdeskstudy/TaskGroupId`
  mytgid=`echo $tgid | sed -e 's/TaskGroupID: *//'`

#MACRO mymess 2 Checking TaskGroup $mytgid for $LHCDescrip
  sixdeskmesslevel=2
  sixdeskmess="Checking TaskGroup $mytgid for $LHCDescrip"
  sixdeskmess
#MACRO mymess

  perl ${SCRIPTDIR}/perl/queryReadyResults.pl $mytgid > $tmp
  stat=$?
  if test $stat -ne 0
  then

#MACRO mymess 0 Problem with query ReadyResults Status $stat `cat $tmp`
    sixdeskmesslevel=0
    sixdeskmess="Problem with query ReadyResults Status $stat `cat $tmp`"
    sixdeskmess
#MACRO mymess

    rm $tmp
    rm $sixdesktasklist

#MACRO myunlock $sixdeskstudy
    sixdesklockdir=$sixdeskstudy
    sixdeskunlock
#MACRO myunlock


#MACRO myexit 99
    sixdeskexitparam=99
    sixdeskexit
#MACRO myexit

  fi
  # remove the \r's............

#MACRO mymktmp sixdeskresults $sixdeskjobs
  sixdesktmpname=sixdeskresults
  sixdesktmpdirarg=$sixdeskjobs
  sixdeskmktmp
  sixdeskresults=$sixdesktmp
#MACRO mymktmp

  awk -f ${SCRIPTDIR}/awk/remover.awk $tmp > $sixdeskresults
  rm $tmp
  tot=`grep TotalTasks $sixdeskresults | sed -e 's/TotalTasks: *//'`
  ready=`grep ResultsReady $sixdeskresults | sed -e 's/ResultsReady: *//'`

#MACRO mymess 1 Out of $tot Tasks $ready Results are available
  sixdeskmesslevel=1
  sixdeskmess="Out of $tot Tasks $ready Results are available"
  sixdeskmess
#MACRO mymess

  cat $sixdeskresults
  tasks=`grep ReadyTasks $sixdeskresults | sed -e 's/ReadyTasks: *//'`
  rm $sixdeskresults

#MACRO mymktmp sixdesktasks $sixdeskjobs
  sixdesktmpname=sixdesktasks
  sixdesktmpdirarg=$sixdeskjobs
  sixdeskmktmp
  sixdesktasks=$sixdesktmp
#MACRO mymktmp

  echo "$tasks" > $sixdesktasks
  awk -f ${SCRIPTDIR}/awk/splitter.awk $sixdesktasks > $sixdesktasklist
  rm $sixdesktasks 
elif test $sixdeskplatform = "boinc"
then
  sixdeskboinc=$sixdeskboincdir
  export sixdeskboinc
  if test ! -d $sixdeskboincdir
  then
    mkdir -p $sixdeskboincdir
    # and here use AFS protection group stuff to fix access control list
    fs setacl $sixdeskboincdir $LOGNAME rlidwka $sixdeskpts rl
  fi
  if test -s $sixdeskboincdir/owner
  then
    sixdeskowner=`cat $sixdeskboincdir/owner`
    if test "$sixdeskowner" != "$LOGNAME"
    then

#MACRO mymess 0 The workspace/LHCDescrip $sixdeskboincdirname are already in use by $sixdeskowner!!!
      sixdeskmesslevel=0
      sixdeskmess="The workspace/LHCDescrip $sixdeskboincdirname are already in use by $sixdeskowner!!!"
      sixdeskmess
#MACRO mymess

      rm -f $tmp
      rm -f $sixdesktasklist

#MACRO myunlock $sixdeskstudy
      sixdesklockdir=$sixdeskstudy
      sixdeskunlock
#MACRO myunlock


#MACRO myexit 11
      sixdeskexitparam=11
      sixdeskexit
#MACRO myexit

    fi
  else
    echo "$LOGNAME" > $sixdeskboincdir/owner
  fi
  if test ! -d $sixdeskboincdir/work
  then
    mkdir -p $sixdeskboincdir/work
  fi
  if test ! -d $sixdeskboincdir/results
  then
    mkdir -p $sixdeskboincdir/results
  fi
  cd $sixdeskboinc/results
  find . -name ${workspace}_${LHCDesName}__[0-9]\*__[0-9.]\*_[0-9.]\*__[0-9.]\*_[0-9.]\*__[0-9]__[0-9.]\*_1_sixvf_boinc[0-9]\* > $tmp 2> /dev/null
  cd $sixdeskhome

#MACRO mymktmp sixdeskresults $sixdeskjobs
  sixdesktmpname=sixdeskresults
  sixdesktmpdirarg=$sixdeskjobs
  sixdeskmktmp
  sixdeskresults=$sixdesktmp
#MACRO mymktmp

  sed -f ${SCRIPTDIR}/sed/boincnames.sed $tmp > $sixdeskresults
  rm $tmp
  ready=`wc -l $sixdeskresults`
  ready=`echo $ready | sed -e 's? *\([0-9]*\).*?\1?'`

#MACRO mymess 1 $ready Results are available
  sixdeskmesslevel=1
  sixdeskmess="$ready Results are available"
  sixdeskmess
#MACRO mymess

  cat $sixdeskresults
  cut -d"%" -f6- $sixdeskresults > $tmp 
  cut -d"_" -f4 $tmp > $sixdesktasklist
  rm $tmp
  rm $sixdeskresults
elif test "$sixdeskplatform" = "grid"
then
  # Here will produce a sixdesktasklist for GRID
  echo "GRID not yet implemented"
  rm -f $tmp
  rm -f $sixdesktasklist

#MACRO myunlock $sixdeskstudy
  sixdesklockdir=$sixdeskstudy
  sixdeskunlock
#MACRO myunlock


#MACRO myexit 89
  sixdeskexitparam=89
  sixdeskexit
#MACRO myexit

fi
ok=0
duplicated=0
failed=0

rm -f $sixdeskwork/completed_this_run

touch $sixdesktasklist
for ntaskid in `cat $sixdesktasklist`
do
  if test $sixdeskplatform = "cpss"
  then
    taskid=cpss$ntaskid
  else
    taskid=$ntaskid
  fi
  success="false"
  ignore="true"
  delete="false"
  duplicate="false"
  anerror="false"
  unknown="false"

#MACRO mymess 2 Now treating TaskID $taskid
  sixdeskmesslevel=2
  sixdeskmess="Now treating TaskID $taskid"
  sixdeskmess
#MACRO mymess

  Runnam=""
  Rundir=""
  where=""
  taskids=""
  entry=`grep " $taskid " $IDS/taskids`
  if test "$entry" != ""
  then
    Runnam=`echo $entry | cut -d" " -f1`
    if test $sixdeskplatform = "boinc"
    then
      aboincRunnam=`echo $Runnam | sed -e's/%/__/g'`
      if test ! -f $sixdeskboincdir/results/$workspace"_"$aboincRunnam"_1_sixvf_"$taskid
      then
      # Hopefully because of duplicate TaskIds

#MACRO mymess 0 Looking for duplicates TaskId $taskid
        sixdeskmesslevel=0
        sixdeskmess="Looking for duplicates TaskId $taskid"
        sixdeskmess
#MACRO mymess


#MACRO mymktmp boincdup $sixdeskjobs
        sixdesktmpname=boincdup
        sixdesktmpdirarg=$sixdeskjobs
        sixdeskmktmp
        boincdup=$sixdesktmp
#MACRO mymktmp

        grep " $taskid " $IDS/taskids > $boincdup
        mytimes=`wc -l $boincdup`
        mytimes=`echo "$mytimes" | sed -e 's? *\([0-9]*\).*?\1?'`
        if test "$mytimes" -gt 1
        then

#MACRO mymess 0 FOUND duplicate TaskId  $taskid Times $mytimes
          sixdeskmesslevel=0
          sixdeskmess="FOUND duplicate TaskId  $taskid Times $mytimes"
          sixdeskmess
#MACRO mymess

          while read myline
          do
            aRunnam=`echo $myline | cut -d" " -f1`
            aboincRunnam=`echo $aRunnam | sed -e's/%/__/g'`
            if test -f $sixdeskboincdir/results/$workspace"_"$aboincRunnam"_1_sixvf_"$taskid
            then
              #found one, may be more!

#MACRO mymess 0 Found the duplicated entry $taskid $aRunnam
              sixdeskmesslevel=0
              sixdeskmess="Found the duplicated entry $taskid $aRunnam"
              sixdeskmess
#MACRO mymess

              entry=$myline
              Runnam=`echo $entry | cut -d" " -f1` 

#MACRO mymess 0 Using $Runnam for $taskid
              sixdeskmesslevel=0
              sixdeskmess="Using $Runnam for $taskid"
              sixdeskmess
#MACRO mymess

              break
            fi
          done < $boincdup
          rm -f $boincdup
        else

#MACRO mymess 0 A very serious problem in matching TaskID/Runnam!!!
          sixdeskmesslevel=0
          sixdeskmess="A very serious problem in matching TaskID/Runnam!!!"
          sixdeskmess
#MACRO mymess


#MACRO mymess 0 Could not resolve TaskId $taskid
          sixdeskmesslevel=0
          sixdeskmess="Could not resolve TaskId $taskid"
          sixdeskmess
#MACRO mymess

        fi
      fi
    fi
    taskids=`echo $entry | cut -d" " -f2-`
#   if test "$BNL" = ""
#   then 

#MACRO myrundir $Runnam Rundir
      runnamename=$Runnam
      sixdeskrundir
      Rundir=$rundirname
#MACRO myrundir

#   else
#      export Rundir=`echo $Runnam | sed -e's?%?\/?g'`
#   fi
    where=$sixdesktrack/$Rundir

#MACRO mymess 1 Task $taskid for job $Runnam found in $Rundir
    sixdeskmesslevel=1
    sixdeskmess="Task $taskid for job $Runnam found in $Rundir"
    sixdeskmess
#MACRO mymess

  fi
  if test "$Runnam" = ""
  then 

#MACRO mymess 0 Task $taskid can NOT be found in $sixdeskwork/taskids !!! Deleting result from the server
    sixdeskmesslevel=0
    sixdeskmess="Task $taskid can NOT be found in $sixdeskwork/taskids !!! Deleting result from the server"
    sixdeskmess
#MACRO mymess

    delete="true"
    anerror="true"
    unknown="true"
  else
    where=$sixdesktrack/$Rundir
    if test ! -d "$where"
    then

#MACRO mymess 0 Strange the directory $where for task $taskid does NOT exist!!! We shall ignore this result for the moment
      sixdeskmesslevel=0
      sixdeskmess="Strange the directory $where for task $taskid does NOT exist!!! We shall ignore this result for the moment"
      sixdeskmess
#MACRO mymess

      delete="true"
      anerror="true"
    else
      #let us get the results downloaded
      #sixres.tar.gz will be put here
      cd $where
      if test $sixdeskplatform = "cpss"
      then
        perl ${SCRIPTDIR}/perl/downloadResult.pl $mytgid $ntaskid > down 2>&1
        stat=$?
      elif test $sixdeskplatform = "boinc"
      then
        found="false"
        boincRunnam=`echo $Runnam | sed -e's/%/__/g'`
        if test ! -f $sixdeskboincdir/results/$workspace"_"$boincRunnam"_1_sixvf_"$taskid
        then

#MACRO mymess 0 CANNOT FIND the result file!!!
          sixdeskmesslevel=0
          sixdeskmess="CANNOT FIND the result file!!!"
          sixdeskmess
#MACRO mymess

          anerror="true"
        else
          echo "Found in hierarchy $sixdeskboincdir"
          found="true"
        fi
        if test "$found" = "true"
        then
          mkdir -p sixtrack
          awk -f ${SCRIPTDIR}/awk/remover.awk $sixdeskboincdir/results/$workspace"_"$boincRunnam"_1_sixvf_"$taskid > sixtrack/fort.10
#Eric BOINC marker
          cd sixtrack

#MACRO mymktmp tmp 
          sixdesktmpname=tmp
          sixdesktmpdirarg=
          sixdeskmktmp
          tmp=$sixdesktmp
#MACRO mymktmp

          egrep 'title     ' fort.10 > $tmp
          sed -e's/title     //' $tmp > title.dat
          egrep 'output    ' fort.10 > $tmp
          sed -e's/output    //' $tmp > beambeam-output.dat
          egrep 'lostID    ' fort.10 > $tmp
          sed -e's/lostID    //' $tmp > beambeam-lostID.dat
          egrep 'checkdist ' fort.10 > $tmp
          sed -e's/checkdist //' $tmp > checkdist.dat
          egrep 'SixTwiss  ' fort.10 > $tmp
          sed -e's/SixTwiss  //' $tmp > SixTwiss.dat
          rm $tmp
          myRunnam=`echo $Runnam | cut -c1-50`
          grep "$myRunnam" title.dat > headmess 2>&1
          stat=$?

#MACRO mymess 2 `cat headmess`
          sixdeskmesslevel=2
          sixdeskmess="`cat headmess`"
          sixdeskmess
#MACRO mymess

          rm headmess
          if test $stat -ne 0 
          then

#MACRO mymess 0 Cannot find Runnam $Runnam in title.dat !!!; wrong results???
            sixdeskmesslevel=0
            sixdeskmess="Cannot find Runnam $Runnam in title.dat !!!; wrong results???"
            sixdeskmess
#MACRO mymess

            delete="true"
            ignore="true"
            anerror="true"
            mkdir -p ../problems
            mv ../w$taskid.tar.gz ../problems
          else
            for i in 0 1 2 3 4
            do
              if test ! -f "${bfiles[$i]}"
              then

#MACRO mymess 0 ${bfiles[$i]} appears to be MISSING!!!
                sixdeskmesslevel=0
                sixdeskmess="${bfiles[$i]} appears to be MISSING!!!"
                sixdeskmess
#MACRO mymess

                anerror="true"
                ignore="true"
                delete="true"
                mkdir -p ../problems
                mv ../w$taskid.tar.gz ../problems
              fi
            done
          fi
          if test "$anerror" = "false"
          then
            # See if it is duplicated or not (ALL files exist)
            # and is is it the same???
            # So we just check for beambeam-output.dat.gz
            if test -s ../beambeam-output.dat.gz
            then
            # we assume duplication
            #for myfil in title beambeam-output checkdist beambeam-lostID
            # and we ignore SixTwiss.dat

#MACRO mymess 0 Checking Duplicates $Runnam
              sixdeskmesslevel=0
              sixdeskmess="Checking Duplicates $Runnam"
              sixdeskmess
#MACRO mymess

              duplicate="true"
              for i in  0 1 2 4
              do
                if test -s ../${bfiles[$i]}.gz
                then
                  gunzip -f ../${bfiles[$i]}.gz 
                  diff -b ../${bfiles[$i]} ${bfiles[$i]} > /dev/null
                  if test $? -ne 0
                  then

#MACRO mymess 0 BNL DIFF ${bfiles[$i]} $where!!!
                    sixdeskmesslevel=0
                    sixdeskmess="BNL DIFF ${bfiles[$i]} $where!!!"
                    sixdeskmess
#MACRO mymess

                    anerror="true"
                    ignore="true"
                    delete="true"
                    mkdir -p ../problems
                    mv ../w$taskid.tar.gz ../problems
                  fi 
                  gzip -f ../${bfiles[$i]}
                else
                  duplicate="false"

#MACRO mymess 0 ${bfiles[$i]}.gz is NOT duplicated!
                  sixdeskmesslevel=0
                  sixdeskmess="${bfiles[$i]}.gz is NOT duplicated!"
                  sixdeskmess
#MACRO mymess

                fi
              done  
            else

#MACRO mymess 0 No duplication of beambeam-output.dat
              sixdeskmesslevel=0
              sixdeskmess="No duplication of beambeam-output.dat"
              sixdeskmess
#MACRO mymess

            fi
            if test "$duplicate" = "true"
            then

#MACRO mymess 0 Seem to have duplicated result $Runnam
              sixdeskmesslevel=0
              sixdeskmess="Seem to have duplicated result $Runnam"
              sixdeskmess
#MACRO mymess
 
            fi
            if test "$duplicate" = "false"
            then
### Don't bother with SixTwiss.dat
              for i in  0 1 2 4
              do
                mv ${bfiles[i]} ../${bfiles[i]}
                gzip -f ../${bfiles[i]}
              done
              success="true"
              delete="true"
              rm -f ../w$taskid.tar.gz
# and keep fort.10 for CASTOR (ther is NO fort.6 from BOINC)
              gzip fort.10
            fi
          fi
#Eric BOINC marker
        fi
      fi
# CPSS handled here
      if test $sixdeskplatform != "boinc"
      then
        if test $stat -ne 0 -o ! -s sixres.tar.gz
        then

#MACRO mymess 0 Download of task $taskid FAILED!!! Status $stat Message `cat down` or empty tar file
          sixdeskmesslevel=0
          sixdeskmess="Download of task $taskid FAILED!!! Status $stat Message `cat down` or empty tar file"
          sixdeskmess
#MACRO mymess

          rm down
          # probably a WEB service problem
          # but delete it anyway (if possible)
          delete="true"
          anerror="true"
          ignore="true"
        else 
          cat down
          rm down
          ls -l sixres.tar.gz
          cp sixres.tar.gz w$taskid.tar.gz 
          gunzip -f sixres.tar.gz > mess 2>&1
          stat=$?
          if test $stat -ne 0
          then
            mymess00 "`ls -l sixres.tar.gz`"

#MACRO mymess 1 gunzip failed!!! `cat mess`
            sixdeskmesslevel=1
            sixdeskmess="gunzip failed!!! `cat mess`"
            sixdeskmess
#MACRO mymess

            # now just delete it but log for future reference
            delete="true"
            anerror="true"
            mkdir -p problems
            mv w$taskid.tar.gz problems
          else
            rm mess
            tar -xf sixres.tar > mess 2>&1
            stat=$?
            if test $stat -ne 0
            then

#MACRO mymess 0 Untar of sixres.tar failed!!!
              sixdeskmesslevel=0
              sixdeskmess="Untar of sixres.tar failed!!!"
              sixdeskmess
#MACRO mymess


#MACRO mymess 0 `ls -l sixres.tar`
              sixdeskmesslevel=0
              sixdeskmess="`ls -l sixres.tar`"
              sixdeskmess
#MACRO mymess


#MACRO mymess 0 `cat $where/mess`
              sixdeskmesslevel=0
              sixdeskmess="`cat $where/mess`"
              sixdeskmess
#MACRO mymess

              rm mess
              # never seen this in practice, just delete it
              delete="true"
              anerror="true"
              ignore="true"
              mkdir -p problems
              mv w$taskid.tar.gz problems
            elif test ! -d sixtrack
            then

#MACRO mymess 0 Sixtrack untar has not produced a sixtrack directory!!!
              sixdeskmesslevel=0
              sixdeskmess="Sixtrack untar has not produced a sixtrack directory!!!"
              sixdeskmess
#MACRO mymess


#MACRO mymess 0 `ls -l sixres.tar`
              sixdeskmesslevel=0
              sixdeskmess="`ls -l sixres.tar`"
              sixdeskmess
#MACRO mymess


#MACRO mymess 0 `cat mess`
              sixdeskmesslevel=0
              sixdeskmess="`cat mess`"
              sixdeskmess
#MACRO mymess
 
              rm mess
              # never seen this in practice, just delete it
              delete="true"
              anerror="true"
              ignore="true"
              mkdir -p problems
              mv w$taskid.tar.gz problems
            else
              rm mess
              rm sixres.tar
              cd sixtrack
              touch sixtrack.exe
              rm -f sixtrack.exe
              # Now remove any \r characters from Windows in ASCII text files
              # bnlforts are explicitly defined here
              for fileno in 4 6 9 10 12 14 15 17 18 19 \
                           20 21 22 23 24 25 26 27 28 29 31 34 91 92 93 98 \
                           51 52 53 97
              do
                myfil=fort.$fileno
                if test -s $myfil
                then
                  file $myfil | egrep "CRLF" > /dev/null 2>&1
                  if test $? -eq 0
                  then
                    awk -f ${SCRIPTDIR}/awk/remover.awk $myfil > $tmp
                    mv $tmp $myfil
                  fi
                fi
              done 
              if test -f fort.93
              then
                echo "$Runnam $Rundir $taskid" >> $sixdesklogdir/restart.log
                cat fort.93 >> $sixdesklogdir/restart.log
              fi
              myRunnam=`echo $Runnam | cut -c1-50`
              head -20 fort.6 | grep "$myRunnam" > headmess 2>&1
              stat=$?

#MACRO mymess 1 `cat headmess`
              sixdeskmesslevel=1
              sixdeskmess="`cat headmess`"
              sixdeskmess
#MACRO mymess

              rm headmess
              if test $stat -ne 0 
              then

#MACRO mymess 0 Cannot find Runnam $Runnam in fort.6 !!!; wrong results???
                sixdeskmesslevel=0
                sixdeskmess="Cannot find Runnam $Runnam in fort.6 !!!; wrong results???"
                sixdeskmess
#MACRO mymess

                delete="true"
                ignore="true"
                anerror="true"
                mkdir -p ../problems
                mv ../w$taskid.tar.gz ../problems
              else
                for i in 0 1 2 3 4
                do
                  if test ! -f "${bforts[$i]}"
                  then

#MACRO mymess 0 ${bforts[$i]} appears to be MISSING!!!
                    sixdeskmesslevel=0
                    sixdeskmess="${bforts[$i]} appears to be MISSING!!!"
                    sixdeskmess
#MACRO mymess

                    anerror="true"
                    ignore="true"
                    delete="true"
                    mkdir -p ../problems
                    mv ../w$taskid.tar.gz ../problems
                  fi
                done
              fi
              if test "$anerror" = "false"
              then
                # See if it is duplicated or not
                # and is is it the same???
                # So we just check for beambeam-output.dat.gz
                if test -s ../beambeam-output.dat.gz
                then
                # we have duplication
                #for myfil in title beambeam-output checkdist beambeam-lostID
                # and we ignore SixTwiss.dat

#MACRO mymess 0 Checking Duplicates $Runnam
                  sixdeskmesslevel=0
                  sixdeskmess="Checking Duplicates $Runnam"
                  sixdeskmess
#MACRO mymess

                  duplicate="true"
                  for i in  0 1 2 4
                  do
                    if test -s ../${bfiles[$i]}.gz
                    then
                      gunzip -f ../${bfiles[$i]}.gz 
                      diff -b ../${bfiles[$i]} ${bforts[$i]} > /dev/null
                      if test $? -ne 0
                      then

#MACRO mymess 0 BNL DIFF ${bfiles[$i]} $where!!!
                        sixdeskmesslevel=0
                        sixdeskmess="BNL DIFF ${bfiles[$i]} $where!!!"
                        sixdeskmess
#MACRO mymess

                        anerror="true"
                        ignore="true"
                        delete="true"
                        duplicate="false"
                        mkdir -p ../problems
                        mv ../w$taskid.tar.gz ../problems
                      fi 
                      gzip -f ../${bfiles[$i]}
                    else
                      duplicate="false"

#MACRO mymess 0 ${bfiles[$i]}.gz is NOT duplicated!
                      sixdeskmesslevel=0
                      sixdeskmess="${bfiles[$i]}.gz is NOT duplicated!"
                      sixdeskmess
#MACRO mymess

                    fi
                  done  
                else

#MACRO mymess 0 No duplication of beambeam-output.dat
                  sixdeskmesslevel=0
                  sixdeskmess="No duplication of beambeam-output.dat"
                  sixdeskmess
#MACRO mymess

                fi
                if test "$duplicate" = "true"
                then

#MACRO mymess 0 Seem to have duplicated result $Runnam
                  sixdeskmesslevel=0
                  sixdeskmess="Seem to have duplicated result $Runnam"
                  sixdeskmess
#MACRO mymess
 
                fi
                if test "$duplicate" = "false"
                then
# Don't bother with SixTwiss.dat
                  for i in  0 1 2 4
                  do
                    cp ${bforts[i]} ../${bfiles[i]}
                    gzip -f ../${bfiles[i]}
                  done
                fi
                success="true"
                delete="true"
                rm -f ../w$taskid.tar.gz
              fi
              # End of it all (except copying to CASTOR)
              # End of 1st time or not
              cd $where
              if test "$ignore" = "false"
              then
                #Now figure out the CASTOR name etc
                if test "$sixdeskcastor" = "true"
                then
                  export RFIO_USE_CASTOR_V2="YES"
                  export STAGE_HOST="castorpublic"
                  export STAGE_SVCCLASS="default"
                  CASTOR=/castor/cern.ch/nap/$LOGNAME/direct_track/$Rundir

#MACRO mymess 1 CASTOR of $Runnam.tar to $CASTOR
                  sixdeskmesslevel=1
                  sixdeskmess="CASTOR of $Runnam.tar to $CASTOR"
                  sixdeskmess
#MACRO mymess

                  nsrm -rf $CASTOR > /dev/null 2>&1
                  nsmkdir -p $CASTOR
                  cd sixtrack

#MACRO mymktmp tmp 
                  sixdesktmpname=tmp
                  sixdesktmpdirarg=
                  sixdeskmktmp
                  tmp=$sixdesktmp
#MACRO mymktmp

                  tar cvf ../$Runnam.tar *.gz > $tmp 2>&1
                  stat=$?
                  cd ..
                  if test $stat -ne 0
                  then

#MACRO mymess 0 Tar $Runnam.tar $where/.*.gz failed!!!
                    sixdeskmesslevel=0
                    sixdeskmess="Tar $Runnam.tar $where/.*.gz failed!!!"
                    sixdeskmess
#MACRO mymess


#MACRO mymess 0 `cat $tmp`
                    sixdeskmesslevel=0
                    sixdeskmess="`cat $tmp`"
                    sixdeskmess
#MACRO mymess

                    rm $tmp
                    anerror="true"
                  else
                    rm $tmp
                    rfcp $Runnam.tar $CASTOR > $tmp 2>&1
                    stat=$?
                    rm $Runnam.tar
                    if test $stat -ne 0
                    then

#MACRO mymess 0 Copy to CASTOR failed!!! rfcp $where/sixtrack/$Runnam.tar $CASTOR
                      sixdeskmesslevel=0
                      sixdeskmess="Copy to CASTOR failed!!! rfcp $where/sixtrack/$Runnam.tar $CASTOR"
                      sixdeskmess
#MACRO mymess


#MACRO mymess 0 `cat $tmp`
                      sixdeskmesslevel=0
                      sixdeskmess="`cat $tmp`"
                      sixdeskmess
#MACRO mymess

                      rm $tmp
                      anerror="true"
                    else
                      rm $tmp
                      success="true"
                      delete="true"
                    fi
                  fi                  
                else
                  # CASTOR is not available
                  success="true"
                  delete="true"
                fi
              fi
              # end of various nasties with fort.10 fort.6 etc
            fi
            # end of untar problem or not
          fi
          # end of gunzip problem
        fi
        # end of download result
      fi
      # end of if NOT BOINC
      touch $where/down
      rm $where/down
    fi
    # end of checking where
  fi
  # end of found a taskid or not
  cd $sixdeskhome
  if test "$success" = "true"
  then

#MACRO mymess 0 BNL download complete, updating completed jobs etc
    sixdeskmesslevel=0
    sixdeskmess="BNL download complete, updating completed jobs etc"
    sixdeskmess
#MACRO mymess


#MACRO mylock $sixdeskwork
###    sixdesklockdir=$sixdeskwork
###    sixdesklock
#MACRO mylock


#MACRO mymktmp tmp 
    sixdesktmpname=tmp
    sixdesktmpdirarg=
    sixdeskmktmp
    tmp=$sixdesktmp
#MACRO mymktmp

# Now we make a file completed_this_run which we will
# use to update a parallel mycompleted_cases and myincomplete_cases
    echo "$Runnam" >> $sixdeskwork/completed_this_run
    touch $sixdeskwork/DEBUG
    sed -e'/^'$Runnam'$/d' $sixdeskwork/incomplete_cases > $tmp
    cp $tmp $sixdeskwork/incomplete_cases
    if test $? -ne 0
    then
      stat $sixdeskwork/incomplete_cases >> $sixdeskwork/DEBUG
      stat $tmp >> $sixdeskwork/DEBUG

#MACRO mymess 0 AFS problem with incomplete_cases
      sixdeskmesslevel=0
      sixdeskmess="AFS problem with incomplete_cases"
      sixdeskmess
#MACRO mymess


#MACRO mymess 0 `stat $sixdeskwork/incomplete_cases`
      sixdeskmesslevel=0
      sixdeskmess="`stat $sixdeskwork/incomplete_cases`"
      sixdeskmess
#MACRO mymess


#MACRO mymess 0 `stat $tmp`
      sixdeskmesslevel=0
      sixdeskmess="`stat $tmp`"
      sixdeskmess
#MACRO mymess


#MACRO myexit 999
      sixdeskexitparam=999
      sixdeskexit
#MACRO myexit

    else
      rm $tmp
    fi
    dicases=`wc -l $sixdeskwork/incomplete_cases`
    dicases=`echo $dicases | sed -e 's? *\([0-9]*\).*?\1?'`
    if test -s $sixdeskwork/completed_cases
    then
      sed -e'/^'$Runnam'$/d' $sixdeskwork/completed_cases > $tmp
      cp $tmp $sixdeskwork/completed_cases
      if test $? -ne 0
      then
        stat $sixdeskwork/completed_cases >> $sixdeskwork/DEBUG
        stat $tmp >> $sixdeskwork/DEBUG

#MACRO mymess 0 AFS problem with completed_cases
        sixdeskmesslevel=0
        sixdeskmess="AFS problem with completed_cases"
        sixdeskmess
#MACRO mymess


#MACRO mymess 0 `stat $sixdeskwork/completed_cases`
        sixdeskmesslevel=0
        sixdeskmess="`stat $sixdeskwork/completed_cases`"
        sixdeskmess
#MACRO mymess


#MACRO mymess 0 `stat $tmp`
        sixdeskmesslevel=0
        sixdeskmess="`stat $tmp`"
        sixdeskmess
#MACRO mymess


#MACRO myexit 999
        sixdeskexitparam=999
        sixdeskexit
#MACRO myexit

      else
        rm $tmp 
      fi
    fi
    echo $Runnam >> $sixdeskwork/completed_cases
    dccases=`wc -l $sixdeskwork/completed_cases`
    dccases=`echo $dccases | sed -e 's? *\([0-9]*\).*?\1?'`
    tot=`expr $dicases + $dccases`
    allcases=`wc -l $sixdeskwork/taskids`
    allcases=`echo $allcases | sed -e 's? *\([0-9]*\).*?\1?'`
    if test "$tot" -ne "$allcases"
    then

#MACRO mymess 0 DEBUGZ $tot NOT= $allcases !!!
      sixdeskmesslevel=0
      sixdeskmess="DEBUGZ $tot NOT= $allcases !!!"
      sixdeskmess
#MACRO mymess

      stat $sixdeskwork/completed_cases >> $sixdeskwork/DEBUG
      stat $sixdeskwork/incomplete_cases >> $sixdeskwork/DEBUG

#MACRO mymess 0 `stat $sixdeskwork/completed_cases`
      sixdeskmesslevel=0
      sixdeskmess="`stat $sixdeskwork/completed_cases`"
      sixdeskmess
#MACRO mymess


#MACRO mymess 0 `stat $sixdeskwork/incomplete_cases`
      sixdeskmesslevel=0
      sixdeskmess="`stat $sixdeskwork/incomplete_cases`"
      sixdeskmess
#MACRO mymess


#MACRO myexit 999
      sixdeskexitparam=999
      sixdeskexit
#MACRO myexit

    fi
    #Eric here we should now delete other redundant tasks
    #mess="Taskids were x$taskids""x"
    #taskids=`echo "$taskids" | sed -e's? '$taskid' ? ?'`
    #mess="Taskids now x$taskids""x"
    #for l in $taskids
    #do
    #  echo "Here I will delete $l in $mytgid"
    #done

#MACRO myunlock $sixdeskwork
###    sixdesklockdir=$sixdeskwork
###    sixdeskunlock
#MACRO myunlock


#MACRO mymess 2 Removing JOB_NOT_YET_COMPLETED in $where
    sixdeskmesslevel=2
    sixdeskmess="Removing JOB_NOT_YET_COMPLETED in $where"
    sixdeskmess
#MACRO mymess

    rm -f $where/JOB_NOT_YET_COMPLETED
#  Do NOT remove input files when using CPSS , BOINC or GRID???
#  rm $where/fort.2.gz $where/fort.3.gz $where/fort.8.gz $where/fort.16.gz
  fi
  if test "$where" != ""
  then
    if test -d $where
    then
      if test -d $where/sixtrack
      then
        rm -r $where/sixtrack
      fi
      echo "Final state of $where"
      ls -l $where
    fi
  fi
  if test "$delete" = "true"
  then
    # success = true => delete = true
    if test "$unknown" = "false"
    then

#MACRO mylock $sixdeskjobs
###      sixdesklockdir=$sixdeskjobs
###      sixdesklock
#MACRO mylock

      touch $sixdeskjobs/incomplete_tasks
      sed -e'/'$Runnam' '$taskid'/d' $sixdeskjobs/incomplete_tasks > $tmp
      mv $tmp $sixdeskjobs/incomplete_tasks
      touch $sixdeskjobs/completed_tasks
      sed -e'/'$Runnam' '$taskid'/d' $sixdeskjobs/completed_tasks > $tmp
      mv $tmp $sixdeskjobs/completed_tasks
      echo "$Runnam" "$taskid" >> $sixdeskjobs/completed_tasks

#MACRO myunlock $sixdeskjobs
###      sixdesklockdir=$sixdeskjobs
###      sixdeskunlock
#MACRO myunlock

    fi
    if test $sixdeskplatform = "cpss"
    then

#MACRO mymess 2 Deleting result $ntaskid from the server
      sixdeskmesslevel=2
      sixdeskmess="Deleting result $ntaskid from the server"
      sixdeskmess
#MACRO mymess

      perl ${SCRIPTDIR}/perl/confirmResultDownload.pl $ntaskid > $tmp 2>&1
      stat=$?
      if test $stat -ne 0
      then

#MACRO mymess 0 confirmResultDownload failed!!! `cat $tmp`
        sixdeskmesslevel=0
        sixdeskmess="confirmResultDownload failed!!! `cat $tmp`"
        sixdeskmess
#MACRO mymess

      fi
      rm $tmp
    elif test $sixdeskplatform = "boinc"
    then

#MACRO mymess 2 Deleting result $taskid
      sixdeskmesslevel=2
      sixdeskmess="Deleting result $taskid"
      sixdeskmess
#MACRO mymess

      if test "$Runnam" != ""
      then
        rm -f $sixdeskboincdir/results/${workspace}_${boincRunnam}_1_sixvf_$taskid
      else
        rm -f $sixdeskboincdir/results/${workspace}_*_1_sixvf_$taskid
      fi
    fi
  fi
  if test $success = "false"
  then
    if test "$anerror" = "true"
    then

#MACRO mymess 0 Download FAILED for $taskid : $where  !!!
      sixdeskmesslevel=0
      sixdeskmess="Download FAILED for $taskid : $where  !!!"
      sixdeskmess
#MACRO mymess

      failed=`expr $failed + 1`
      touch $sixdesklogdir/sixdeskerror.log
      grep "^$taskid " $sixdesklogdir/sixdeskerror.log > /dev/null 2>&1
      if test $? -ne 0
      then
        echo "$taskid $Runnam $Rundir" >> $sixdesklogdir/sixdeskerror.log
      fi
    fi
  fi
  if test "$duplicate" = "true" 
  then
    duplicated=`expr $duplicated + 1`

#MACRO mymess 2 $taskid ignored (duplicate/redundant result)
    sixdeskmesslevel=2
    sixdeskmess="$taskid ignored (duplicate/redundant result)"
    sixdeskmess
#MACRO mymess

  elif test "$success" = "true"
  then
    ok=`expr $ok + 1`

#MACRO mymess 2 $taskid downloaded successfully to $where
    sixdeskmesslevel=2
    sixdeskmess="$taskid downloaded successfully to $where"
    sixdeskmess
#MACRO mymess

  fi
done  
# end of all tasks
rm -f $sixdesktasklist

#MACRO mymess 0 Before this download $cases cases, $ccases complete ($icases incomplete)
sixdeskmesslevel=0
sixdeskmess="Before this download $cases cases, $ccases complete ($icases incomplete)"
sixdeskmess
#MACRO mymess

if test "$ready" -ne 0
then

#MACRO mymess 0 Of $ready Ready results, $ok were downloaded successfully, $duplicated were deleted as duplicate/redundant, and $failed failed.
  sixdeskmesslevel=0
  sixdeskmess="Of $ready Ready results, $ok were downloaded successfully, $duplicated were deleted as duplicate/redundant, and $failed failed."
  sixdeskmess
#MACRO mymess

else

#MACRO mymess 0 There were no results available
  sixdeskmesslevel=0
  sixdeskmess="There were no results available"
  sixdeskmess
#MACRO mymess

fi

#MACRO myunlock $sixdeskstudy
###sixdesklockdir=$sixdeskstudy
###sixdeskunlock
#MACRO myunlock


# Get the counts after the run for checking

#MACRO mylock $sixdeskwork
###sixdesklockdir=$sixdeskwork
###sixdesklock
#MACRO mylock

if test -f $sixdeskwork/taskids
then
  cases=`wc -l "$sixdeskwork/taskids"`
  cases=`echo "$cases" | sed -e 's? *\([0-9]*\).*?\1?'`
fi
icases=0
if test -s $sixdeskwork/incomplete_cases
then
  icases=`wc -l $sixdeskwork/incomplete_cases`
  icases=`echo $icases | sed -e 's? *\([0-9]*\).*?\1?'`
fi
ccases=0
if test -s $sixdeskwork/completed_cases
then
  ccases=`wc -l $sixdeskwork/completed_cases`
  ccases=`echo $ccases | sed -e 's? *\([0-9]*\).*?\1?'`
fi

#MACRO mymess 0 After  this download $cases cases, $ccases complete ($icases incomplete)
sixdeskmesslevel=0
sixdeskmess="After  this download $cases cases, $ccases complete ($icases incomplete)"
sixdeskmess
#MACRO mymess

update_cases

#MACRO myunlock $sixdeskstudy
sixdesklockdir=$sixdeskstudy
sixdeskunlock
#MACRO myunlock


#MACRO myexit 0
sixdeskexitparam=0
sixdeskexit
#MACRO myexit

