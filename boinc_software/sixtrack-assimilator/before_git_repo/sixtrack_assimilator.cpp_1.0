// This file is part of BOINC.
// http://boinc.berkeley.edu
// Copyright (C) 2008 University of California
//
// BOINC is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// BOINC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.

// A sample assimilator that:
// 1) if success, copy the output file(s) to a directory
// 2) if failure, append a message to an error log

#include <stdio.h>
#include <unistd.h>
#include <vector>
#include <string>
#include <cstdlib>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include "boinc_db.h"
#include "error_numbers.h"
#include "filesys.h"
#include "sched_msgs.h"
#include "validate_util.h"
#include "sched_config.h"

using std::vector;
using std::string;

#define STR_SIZE 4096
static char *SPOOLDIR = "/afs/cern.ch/user/b/boinc/scratch0/boinc";
static char *RESULTDIR = "results";
static char *ERRORREPT = "sample_results/errors";

int write_error(int n, char* p) {
    static FILE* f = 0;
    int errnolast = errno;

    if (!f) {
        f = fopen(config.project_path(ERRORREPT), "a");
        if (!f) return ERR_FOPEN;
    }
    fprintf(f, "POS=%-2d: %d %s %s\n", n,errnolast,strerror(errnolast),p);
    fflush(f);
    return n;
}

int assimilate_handler(
    WORKUNIT& wu, vector<RESULT>& /*results*/, RESULT& canonical_result
) {
    int retval;
    char buf[STR_SIZE];
    unsigned int i;
    int err;

//    retval = boinc_mkdir(config.project_path(RESULTDIR));
//    if (retval) return retval;

    if (wu.canonical_resultid) {
        vector<FILE_INFO> output_files;
        char copy_path[STR_SIZE];
        get_output_file_infos(canonical_result, output_files);
        unsigned int n = output_files.size();
        bool file_copied = false;
	DIR *dirp = NULL;

/* find name of the directory based on the convention SPOOLDIR/dir-name__ */
	strncpy(buf,wu.name,STR_SIZE);
        char *dirnul = strstr(buf,"__");
        *dirnul = '\0';
	if( (err=snprintf(copy_path,STR_SIZE,"%s/%s/%s",SPOOLDIR,buf,RESULTDIR)) >= STR_SIZE)
			return write_error(1,copy_path);
        if( (dirp = opendir(copy_path)) == NULL) {
		 write_error(2,copy_path);
		 if(mkdir(copy_path, 0777) < 0) return write_error(2,copy_path);
	}
	else closedir(dirp); // directory exists;

/*iza debug  write_error(2,copy_path); */
        for (i=0; i<n; i++) {
            FILE_INFO& fi = output_files[i];
            if (n==1) {
		if( (err=snprintf(copy_path,STR_SIZE,"%s/%s/%s/%s",SPOOLDIR,buf,RESULTDIR,wu.name)) >= STR_SIZE)
			return write_error(3,copy_path);
            } else {
		if( (err=snprintf(copy_path,STR_SIZE,"%s/%s/%s/%s_%d",SPOOLDIR,buf,RESULTDIR,wu.name,i)) >= STR_SIZE)
			return write_error(3,copy_path);
//                copy_path = config.project_path("%s/%s_%d",RESULTDIR, wu.name, i);
            }
            retval = boinc_copy(fi.path.c_str() , copy_path);
/*iza debug   write_error(9,(char *) fi.path.c_str()); */
/*iza debug   write_error(retval,copy_path);  */
            if (!retval) {
                file_copied = true;
            }
        }
        if (!file_copied) {
	    if( (err=snprintf(copy_path,STR_SIZE,"%s/%s/%s/%s_%s",SPOOLDIR,buf,RESULTDIR,wu.name,"no_output")) >= STR_SIZE)
			return write_error(5,copy_path);
//            copy_path = config.project_path("%s/%s_%s",RESULTDIR, wu.name, "no_output_files");

            FILE* f = fopen(copy_path, "w");
            if (!f) write_error(6,copy_path);
/*  accept that the error leads to loss of the result; names of results are noted in error file */
            else fclose(f);
        }
    } else {
	snprintf(buf,STR_SIZE,"%s: 0x%x",wu.name,wu.error_mask);
        write_error(7,buf);
    }
    return 0;
}
