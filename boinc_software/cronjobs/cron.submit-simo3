#!/bin/bash
#
# R.A.Owen 2008-11-03
# changed I.Zacharov 2011-01-19
# commented out #mv .problem
# Updated 13.12.2013 Nils, changed AFS dir ref
# Updated 06.10.2016 A.Mereghetti, added megaZip functionality
# Updated 25.03.2017 A.Mereghetti, SixOut.zip + appname (from .desc)
# Updated 01.05.2019 A.Mereghetti, appnum + default appNum
# Updated 13.09.2019 A.Mereghetti, EOS spooling
set -e

#Set Variables
boincdir=/data/boinc/project/sixtrack
host=$(hostname -s)

logdir=$boincdir/log_$host
[ -d $logdir ] || mkdir $logdir
LOGFILE="$logdir/$(basename $0).log"

lockdir=$boincdir/pid_$host
[ -d $lockdir ] || mkdir $lockdir
lockfile=$lockdir/$(basename $0).lock

spooldir=/afs/cern.ch/work/b/boinc/boinc
spooldirUpload=$spooldir/upload

# default app name
applicationDef=sixtrack
# default app ver
appVerDef=50205

# The relative path of the workunit template file from the config dir.
# this template will present Sixin.zip as the input file
WU_template=templates/${applicationDef}_wu_template.xml

# The relative path of the result template file from the config dir.
# this template will bring back also the Sixout.zip results
result_template_SixOutZip=templates/${applicationDef}_res_template.xml

export EOS_MGM_URL=root://eosuser.cern.ch 
pathInEos=/eos/user/s/sixtadm/spooldirs/uploads/boinc
tmpDirBase=/tmp/sixtadm/`basename $0`/boinc
nMaxRetrial=10

TLpath="/afs/cern.ch/work/s/sixtadm/public/monitor_activity/boinc_software/monitor-boinc-server/general-activity/SixTrack_status_????-??-??.dat"

#Define finctions
abort(){
    exitcode=1
    if [ $# = 2 ] ; then
	exitcode=$1
	shift
    fi
    error "$1"
    log "ABORT exitcode is $exitcode"
    exit $exitcode	
}
	
log(){ # log_message
    if [ $# -gt 0 ] ; then 
	logtofile "$*"
    else
	local line
	while read line ; do 
	    logtofile "$line"
	done
    fi
}   

logtofile(){ #[opt-file] log_message
    local logfile
    logfile="$LOGFILE"
    if [ $# -gt 1 ] ; then 
	logfile="$logdir/$1"
	shift
    fi
    echo "$(date -Iseconds) $1" >>"$logfile"
}

logstudy(){ # log_message 
    if [ $# -gt 0 ] ; then 
	logtofile "submit.${studyname}.log" "$*"
    else
	local line
	while read line ; do 
	    logtofile "submit.${studyname}.log" "$line"
	done
    fi
}


error(){
	echo ERROR: $(basename $0) "$1" 1>&2 
	log ERROR: "$1"
}

warn(){
	echo WARNING: $(basename $0) "$1" 1>&2 
	log WARNING: "$1"
}

#Klog(){
#echo   $boincdir/bin/klogscript boinc $boincdir/keys/.boinc.k
#}

getlock(){
    if  ln -s PID:$$ $lockfile >/dev/null 2>&1 ; then
	trap "rm $lockfile; log Relase lock $lockfile" EXIT
	log Got lock $lockfile 
    else 
	abort 1 "$lockfile already exists. $0 already running? Abort..."
	#never get here
	exit 1
    fi
}


run_spool_megazip(){

    megaZip=1
    
    # take into account arrival time
    find "$spooldirUpload" -mmin +5 -name "*.zip" -printf "%T+\t%p\n" | sort | awk '{print ($2)}' | (
	while read workBatch ; do
	    unzip -t $workBatch  >/dev/null 2>&1
	    if [ $? -ne 0 ] ; then
		warn "integrity problem with $workBatch - move it to ${workBatch}.err"
		mv $workBatch ${workBatch}.err
		continue
	    fi
	    origPath=`mktemp -d -p /tmp/`
	    warn "$workBatch being processed in $origPath ..."
	    cp $workBatch $origPath
	    nForeseen=`unzip -l ${workBatch} | wc -l`
	    if traffic_light ; then
	        # remember that you must run in $boincdir
	        unzip $workBatch -d $origPath >/dev/null 2>&1
	        # check for unzipped .desc files
	        find $origPath -maxdepth 1 -type f -name '*.desc' | (
	            while read descfile ; do
	        	    # process the desc files
	        	    if submit_descfile "$descfile" ; then
	        		logstudy "Submitted $WUname"
	        	    else
	        		logstudy "Problem submitting $WUname"
	        	    fi
	            done
	        )
	        warn " ...going on with next MegaZip."
	        rm -rf $origPath
	        rm $workBatch
	    fi
	done
    )
}

run_spool(){ # max_jobs_to_submit, max_jobs_perStudy, specific_study

    megaZip=0
    
    local max_jobs="$1"	
    local complete=0
    local lMaxJobs=false
    [ -z "${max_jobs}" -o "${max_jobs}" = "0" ] || lMaxJobs=true

    local max_jobs_perStudy="$2"	
    local lMaxJobsPerStudy=false
    [ -z "${max_jobs_perStudy}" -o "${max_jobs_perStudy}" = "0" ] || lMaxJobsPerStudy=true

    if [ -z "$3" ] ; then
        #find the work dirs 2 levels down
	# take into account arrival time
	local allWorkDirs=`find "$spooldir" -maxdepth 2 -type d -name "work" -printf "%T+\t%p\n" | sort | awk '{print ($2)}'`
    else
	#target a specific study
	local allWorkDirs=$spooldir/$3/work
    fi

    # main loop
    for workdir in ${allWorkDirs} ; do
        ! ${lMaxJobsPerStudy} || local __StudyComplete=0
	#check for desc files in the current work dir, and subfolders
	# take into account arrival time
	if ${lMaxJobsPerStudy} ; then
	    local allDescs=`find "$workdir" -maxdepth 2 -type f -name '*.desc' -printf "%T+\t%p\n" | sort | awk '{print ($2)}' | head -n ${max_jobs_perStudy}`
	else
	    local allDescs=`find "$workdir" -maxdepth 2 -type f -name '*.desc' -printf "%T+\t%p\n" | sort | awk '{print ($2)}'`
	fi
	nForeseen=`echo "${allDescs}" | wc -l`
	let nForeseen=${nForeseen}*2
	if traffic_light ; then
	    for descfile in ${allDescs} ; do
	        #process the desc files
	        origPath=`dirname ${descfile}`
                ! ${lMaxJobsPerStudy} || let __StudyComplete+=1
	        if submit_descfile "$descfile" ; then
	    	logstudy "Submitted $WUname"
	    	#stop after max_jobs (0=unlimited)
	    	if ${lMaxJobs} ; then
	    	    complete=$(( $complete + 1 ))
	    	    if [ $complete -ge $max_jobs ] ; then
                            log "reached ${max_jobs} in total"
	    		break 2
	    	    fi
	    	fi
	        else
	    	logstudy "Problem submitting $WUname"
	        fi
	    done
	    if [ -n "${allDescs}" ] ; then
	        if ${lMaxJobsPerStudy} ; then
                    if [ ${__StudyComplete} -eq ${max_jobs_perStudy} ] ; then
	    	    log "limit to ${max_jobs_perStudy} reached for ${workdir}"
	            fi
                fi
	    fi
	fi
    done
}

run_spool_EOS(){

    # get .tar.gz files from ${pathInEos} (path in EOS) and 
    #     ${spooldirUpload} (back-up in AFS in case of problems with EOS)

    megaZip=0
    origPath=${tmpDirBase}

    for __tmpSourceDir in ${pathInEos} ${spooldirUpload} ; do

	if [[ "${__tmpSourceDir}" == "/eos"* ]] ; then
	    gzFiles=`eos find -name "*.tar.gz" ${__tmpSourceDir}`
	else
	    gzFiles=`find ${__tmpSourceDir} -mmin +5 -name "*.tar.gz"`
	fi
	
	log ".tar.gz files in ${__tmpSourceDir}:"
	echo "${gzFiles}" | log
	
        for gzFile in ${gzFiles} ; do
        
            gzFileName=`basename ${gzFile}`

	    if [[ "${__tmpSourceDir}" == "/eos"* ]] ; then
		myCommand="xrdcp --cksum adler32 ${EOS_MGM_URL}/${pathInEos}/${gzFileName} ${tmpDirBase}"
		loopMe
		if [ $? -ne 0 ] ; then
        	    log "unable to download ${gzFileName} from EOS ${EOS_MGM_URL}/${pathInEos}"
        	    continue
		fi
	    else
		myCommand="cp ${gzFile} ${tmpDirBase}"
		loopMe
		if [ $? -ne 0 ] ; then
		    log "unable to download ${gzFileName} from AFS ${spooldirUpload}"
		    continue
		fi
	    fi

	    spool_EOS_gunzip || continue
		
	    tarFile=${tmpDirBase}/${gzFileName%.gz}
	    spool_EOS_untar || continue
	    
	    spool_EOS_descfiles
		
	    # clean
	    if [[ "${__tmpSourceDir}" == "/eos"* ]] ; then
		eos rm ${pathInEos}/${gzFileName}
	    else
		rm ${gzFile}
	    fi
	    rm ${tarFile}
        done

    done
}

function spool_EOS_gunzip(){
    myCommand="gunzip ${tmpDirBase}/${gzFileName}"
    if loopMe ; then
	return 0
    else
        log "unable to gunzip ${gzFileName}"
	rm ${tmpDirBase}/${gzFileName}
        return 1
    fi
}

function spool_EOS_untar(){
    nForeseen=`tar -tvf ${tarFile} | wc -l`
    # tar -tvf always returns a '.'
    nForeseen=$(( $nForeseen -1 ))
    if traffic_light ; then
	myCommand="tar -xvf ${tarFile} -C ${tmpDirBase}"
	loopMe
	if [ $? -ne 0 ] ; then
            log "unable to untar ${tarFile}"
	    rm ${tarFile}
            return 1
	fi
    else
	rm ${tarFile}
        return 2
    fi
    return 0
}

spool_EOS_descfiles(){
    # remember that you must run in $boincdir
    for descfile in `find "${tmpDirBase}" -type f -name '*.desc'` ; do
        #process the desc files
        if submit_descfile "$descfile" ; then
            logstudy "Submitted $WUname"
        else
            logstudy "Problem submitting $WUname"
        fi
    done
}

function traffic_light(){
    # nPresent: how many tasks presently in queue
    # nTreated: how many tasks (factor 2 only wrt WUs) will be submitted now
    # 0: green
    # 1: red
    local __nPresentTemp=`tail -1 ${TLpath} 2> /dev/null | awk '{print ($3)}'`
    if [ -z "${__nPresentTemp}" ] ; then
	if [ -z "${nPresent}" ] ; then
	    log "unable to get number of queued ${applicationDef} tasks from ${TLpath}"
	    return 2
	else
	    log "unable to get number of queued ${applicationDef} tasks from ${TLpath} - going on with ${nPresent}"
	fi
    else
	nPresent=${__nPresentTemp}
    fi
    local __nTemp=$(( ${nTreated} +${nPresent} +${nForeseen} ))
    if [ ${__nTemp} -ge ${currentLimit} ] ; then
	log "traffic light is red (treated+present+foreseen>limit): ${nTreated}+${nPresent}+${nForeseen}>${currentLimit}"
	nResidual=0
	return 1
    else
	log "traffic light is green (treated+present+foreseen>limit): ${nTreated}+${nPresent}+${nForeseen}<${currentLimit}"
	let nResidual=${currentLimit}+${__nTemp}
	return 0
    fi
}

submit_descfile(){ 
        # variables from outer function:
        # - megaZip: flag for megaZip;
        # - origPath: path of the .desc file ($workdir or /tmp/...);
        # megaZip=0: $1: full path to .desc file
        # megaZip=1: $1: name of .desc file
        descfile=`basename $1`
        WUname="${descfile%.desc}"
        zipfile="${descfile%.desc}.zip"
        studyname=`echo "${WUname}" | awk 'BEGIN{FS="__"}{print ($1)}'`
        studydir=$spooldir/$studyname
        workdir=$studydir/work

	log "study $studyname - descfile $descfile"

	clearWUvars
	parse_descfile  < "$origPath/$descfile"
	if [ "$WUname" != "$WUinputName" ] ; then
	    error "Problem with $descfile - WUinputName is $WUinputName"
	    mv "${origPath}/${descfile}" "${workdir}/${descfile}.problem"
	    if [ $megaZip = 1 ] ; then
		mv -f "${origPath}/${zipfile}" "${workdir}/${zipfile}"
	    fi
	    warn "moved  ${descfile} to ${descfile}.problem"
	    return 1
	fi

        #overriding delay bound
        WUdelayBound="$WUdelayBoundDef"
	

#copyfiles
#creatework && delete(move?) desc files
#log
	if prepareinputfile ; then
	    #if [ $keepzip = 1 ] ; then
	    #    log "$zipfile copied to $downloadpath"
	    #else
	    #    log "$zipfile moved to $downloadpath"
	    #fi
	    warn " proceed"
	else
	    if [ $keepzip = 1 ] ; then
	        warn "Could not copy input file $zipfile. Skipping"
	    else
	        warn "Could not move input file $zipfile. Skipping"
	    fi
	    mv "${origPath}/${descfile}" "${workdir}/${descfile}.problem"
	    if [ $megaZip = 1 ] ; then
		mv -f "${origPath}/${zipfile}" "${workdir}/${zipfile}"
	    fi
	    warn "moved  ${descfile} to ${descfile}.problem"
	    warn " try later"
	    return 1
	fi
        local __tmpWUappNum=""
        if [ -n "${WUappNum}" ] ; then
            __tmpWUappNum="-app_version_num ${WUappNum}"
        fi

create_cmd="$boincdir/bin/create_work 		   \
 -config_dir $boincdir 				   \
 -appname $WUapplication		           \
 -wu_name $WUname	      			   \
 -wu_template $WU_template 			   \
 -result_template $result_template_SixOutZip       \
 -rsc_fpops_est $WUfpopsEstimate 		   \
 -rsc_fpops_bound $WUfpopsBound 		   \
 -rsc_memory_bound $WUmemBound 			   \
 -rsc_disk_bound $WUdiskBound 			   \
 -delay_bound $WUdelayBound 			   \
 -min_quorum $WUredundancy                         \
 -target_nresults $WUcopies 			   \
 -max_error_results $WUerrors 			   \
 -max_total_results $WUnumIssues 		   \
 -max_success_results $WUresultsWithoutConcensus   \
 ${__tmpWUappNum}                                  \
 $zipfile"

        echo "Running ${create_cmd}" | sed -e's/[ \t]\+/ /g' | log
	if ! output=$(${create_cmd} 2>&1) ; then
	    error "problem with create_work:"
	    echo "${output}" | log
	    warn "Skipping $WUname"
	    log "removing $downloadpath"
	    rm $downloadpath || error "Problem removing $downloadpath"
	
	    mv -f "${origPath}/${descfile}" "${workdir}/${descfile}.problem"
	    if [ $megaZip = 1 ] && [ $keepzip = 1 ] ; then
		mv -f "${origPath}/${zipfile}" "${workdir}/${zipfile}"
	    fi
	    warn "moved  ${descfile} to ${descfile}.problem"
	    return 1
	fi

	log "Workunit $WUname Submitted"
	if [ $keepzip = 1 ] ; then
	    mv -f "${origPath}/${descfile}" "${workdir}/${WUname}.done" 
	    if [ $megaZip = 1 ] ; then
		cp -f "${origPath}/${zipfile}" "${workdir}/${zipfile}"
	    fi
	    log "moved  ${descfile} to ${WUname}.done"
	else
	    rm -f "${origPath}/${descfile}" 
	    log "removed  ${descfile} as processed"
	fi
        # in case of megazip, zipfile will be deleted since the
	#  tmp dir will be deleted
	nTreated=$(( $nTreated +2 ))

	return 0
}


prepareinputfile(){
    
    downloadpath=""
    if output=$($boincdir/bin/dir_hier_path $zipfile 2>&1) ; then
	downloadpath=$(echo "$output" | cut -f 2 -d " ")
    else
	error "dir_hier_path gave error:"
	echo "$output" | log
	abort 10 "downloadpath cannot be set"
    fi
    #downloadpath=$($boincdir/bin/dir_hier_path $zipfile 2>>$LOGFILE | cut -f 2 -d " ")

    if [ -z "$downloadpath" ] ; then
	abort 10  "downloadpath is empty! Bad... "
    fi
    downloaddir=$(dirname $downloadpath)
    [ -d $downloaddir ] || mkdir -p downloaddir
    
    if [ -e $downloadpath ] ; then
	warn "$downloadpath already exists"
	mv "${origPath}/${descfile}" "${workdir}/${descfile}.problem"
	warn "#moved  ${descfile} to ${descfile}.problem"
        if [ $keepzip = 0 ] ; then
		rm -f ${origPath}/$zipfile;
		log "removed ${origPath}/$zipfile";
	fi
	return 1
    fi
    
    if [ $keepzip = 1 ] ; then
	CMD="cp -f"
    else
	CMD="mv"
    fi

    #Maybe sleep for a bit or maybe use IONICE to keep things going!
    $SLEEP # do this before $CMD so exit status is propogated properly
    if output=$($IONICE $CMD ${origPath}/$zipfile $downloadpath 2>&1) ; then
	log "$CMD $zipfile $downloadpath"
	return 0
    else
	local retval=$?
	error "$CMD ${origPath}/$zipfile $downloadpath"
	echo "$output" | log
	return $retval
    fi
}

parse_descfile(){
        WUapplication=${applicationDef}
	WUappNum=${appVerDef}
	read WUinputName
	read WUfpopsEstimate
	read WUfpopsBound
	read WUmemBound
	read WUdiskBound
	read WUdelayBound
	read WUredundancy
	read WUcopies
	read WUerrors
	read WUnumIssues
	read WUresultsWithoutConcensus
	if read junk ; then 
	    if [ "${junk}" == "${applicationDef}" ] ; then
		WUapplication=${junk}
	    else
		warn "Problem with format of $(basename $1)"
		return 1
	    fi
	fi
	if read junk ; then 
	    if [ -n "${junk}" ] ; then
		WUappNum=${junk}
	    fi
	fi
}

clearWUvars(){
	unset WUinputName
	unset WUfpopsEstimate
	unset WUfpopsBound
	unset WUmemBound
	unset WUdiskBound
	unset WUdelayBound
	unset WUredundancy
	unset WUcopies
	unset WUerrors
	unset WUnumIssues
	unset WUresultsWithoutConcensus
	unset WUapplication
}

function loopMe(){
    # myCommand should be defined before the call
    local __reply=1
    local __iTrials=0
    while [ ${__reply} -ne 0 ] && [ ${__iTrials} -lt ${nMaxRetrial} ] ; do
        let __iTrials+=1
        log "command: ${myCommand} - run at `date` - trial ${__iTrials}"
        ${myCommand}
        __reply=$?
    done
    if [ ${__reply} -ne 0 ] ; then
        log " ...giving up on command."
    fi
    return ${__reply}
}

printhelp(){
cat <<EOF
Usage: $(basename $0) [options]

        Where options are:
        -h              - print usage and exit
        -n number       - set max no of jobs to submit this run
	-k		- Keep .desc.done and .zip contents

EOF
}

#Main Program


IONICE=""
SLEEP="sleep 0.5"

if [ -x /usr/bin/ionice ] ; then
    IONICE="/usr/bin/ionice -c2 -n7" #-c2=best effort -n7=low prio
    SLEEP=""
fi

maxjobs=0
maxjobs_perStudy=0
keepzip=0
studyName=""
WUdelayBoundDef=574334 # [s]

while getopts ":hn:m:d:k"  OPT
do
  #Debug
  #echo "OPT is $OPT. OPTIND is $OPTIND. OPTARG is $OPTARG."
case "$OPT" in
h) printhelp ; exit 0 ;;
m) maxjobs_perStudy="$OPTARG" ;;
n) maxjobs="$OPTARG" ;;
d) studyName="$OPTARG" ;;
k) keepzip=1 ;;
:|?) error 'Invalid Argument(s)' ; printhelp; exit 0 ;;
esac
done

log STARTING

#must be in $boincdir for boinc programs to work properly
cd $boincdir

getlock
#Klog

megaZip=0
nResidual=0

# preliminary: remove temp dirs in work older than 1d
# log find ${spooldir} -mindepth 3 -maxdepth 3 -mtime +1 -type d -empty -delete -print
# find ${spooldir} -mindepth 3 -maxdepth 3 -mtime +1 -type d -empty -delete -print | log

# traffic light
currentLimit=`grep -v '#' ${boincdir}/queue_thresholds.txt | awk -v "appName=${applicationDef}" '{if ($1==appName) {print ($2)}}' | tail -1`
if [ -z "${currentLimit}" ] ; then
    abort 1 "unable to get threshold of queued ${applicationDef} tasks from ${boincdir}/queue_thresholds.txt"
fi
nTreated=0
nForeseen=0
traffic_light || abort 1 "traffic light: red"

if ! [ -d ${tmpDirBase} ] ; then
    mkdir -p ${tmpDirBase}
    if [ $? -ne 0 ] ; then
	abort 1 "problems in creating ${tmpDirBase} - cannot proceed"
    fi
fi
origPath=${tmpDirBase}
log "remaining .tar.gz files in ${tmpDirBase} from previous run"
for gzFile in `find ${tmpDirBase} -name "*.tar.gz"` ; do
    gzFileName=`basename ${gzFile}`
    spool_EOS_gunzip || continue
    tarFile=${tmpDirBase}/${gzFileName%.gz}
    spool_EOS_untar || continue
    spool_EOS_descfiles
    rm ${tarFile}
done
log "remaining .tar files in ${tmpDirBase} from previous run"
for tarFile in `find ${tmpDirBase} -name "*.tar"` ; do
    spool_EOS_untar || continue
    spool_EOS_descfiles
    rm ${tarFile}
done
log "remaining .desc files in ${tmpDirBase} from previous run"
spool_EOS_descfiles

log run_spool_EOS
run_spool_EOS

if [ ${nResidual} -gt 0 ] && [ ${maxjobs} -gt ${nResidual} ] ; then
    log "updating maxjobs from ${maxjobs} to ${nResidual} following limit on max number or queued tasks at ${currentLimit}"
    maxjobs=${nResidual}
fi
# log run_spool $maxjobs $maxjobs_perStudy $studyName
# run_spool $maxjobs $maxjobs_perStudy $studyName

# log run_spool_megazip
# run_spool_megazip

log FINISHING
