#!/bin/ksh
#
# The real " run_mad6t "
#
# Paths and tracking variables
. ./dot_env
# Now check for an interactive request -i
inter="false"
if test -s mad6t_interactive
then
  inter="true"
  rm -f mad6t_interactive
  touch mad6t_interactive
fi
# but don't use for BNL
if test "$BNL" != ""
then

#MACRO mymess 0 Use prepare_bnl instead for BNL runs!!!
  sixdeskmesslevel=0
  sixdeskmess="Use prepare_bnl instead for BNL runs!!!"
  sixdeskmess
#MACRO mymess


#MACRO myexit 1
  sixdeskexitparam=1
  sixdeskexit
#MACRO myexit

fi
if test "$inter" = "true"
then

#MACRO mymess 0 Starting interactive MADX runs
  sixdeskmesslevel=0
  sixdeskmess="Starting interactive MADX runs"
  sixdeskmess
#MACRO mymess
 
fi

#MACRO mymess 0 Using madx Version $MADX in $MADX_PATH
sixdeskmesslevel=0
sixdeskmess="Using madx Version $MADX in $MADX_PATH"
sixdeskmess
#MACRO mymess


#MACRO mymess 0 Study $LHCDescrip Runtype $runtype Seeds $istamad to $iendmad
sixdeskmesslevel=0
sixdeskmess="Study $LHCDescrip Runtype $runtype Seeds $istamad to $iendmad"
sixdeskmess
#MACRO mymess

if test ! -s $sixdeskhome/mask/$LHCDescrip.mask
then

#MACRO mymess 0 run_mad6t requires a $LHCDescrip.mask file in sixjobs/mask !!! 
  sixdeskmesslevel=0
  sixdeskmess="run_mad6t requires a $LHCDescrip.mask file in sixjobs/mask !!! "
  sixdeskmess
#MACRO mymess


#MACRO myexit 3
  sixdeskexitparam=3
  sixdeskexit
#MACRO myexit
 
fi
if test ! -d "$sixtrack_input"
then

#MACRO mymess 0 The $sixtrack_input directory does not exist!!!
  sixdeskmesslevel=0
  sixdeskmess="The $sixtrack_input directory does not exist!!!"
  sixdeskmess
#MACRO mymess


#MACRO myexit 3
  sixdeskexitparam=3
  sixdeskexit
#MACRO myexit

fi
# Now lock the study and sixtrack_input

#MACRO mylock $sixdeskstudy
sixdesklockdir=$sixdeskstudy
sixdesklock
#MACRO mylock


#MACRO mylock $sixtrack_input
sixdesklockdir=$sixtrack_input
sixdesklock
#MACRO mylock

# Make sure we set the new (optional) value for the proton mass
# and get temporary copies of the fort.3.mother1/2.
if test "$beam" = "" -o "$beam" = "b1" -o "$beam" = "B1"
then
  appendbeam=''
elif test "$beam" = "b2" -o "$beam" = "B2"
then
  appendbeam='_b2'
else

#MACRO mymess 0 Unrecognised beam option $beam : must be null, b1, B1, b2 or B2!!!
  sixdeskmesslevel=0
  sixdeskmess="Unrecognised beam option $beam : must be null, b1, B1, b2 or B2!!!"
  sixdeskmess
#MACRO mymess


#MACRO myunlock $sixtrack_input
  sixdesklockdir=$sixtrack_input
  sixdeskunlock
#MACRO myunlock


#MACRO myunlock $sixdeskstudy
  sixdesklockdir=$sixdeskstudy
  sixdeskunlock
#MACRO myunlock


#MACRO myexit 6
  sixdeskexitparam=6
  sixdeskexit
#MACRO myexit

fi
sed -e 's?%pmass?'$pmass'?g' \
    -e 's?%emit_beam?'$emit_beam'?g' \
    $sixdeskhome/control_files/fort.3.mother1_${runtype} > $sixtrack_input/fort.3.mother1.tmp

cp $sixdeskhome/control_files/fort.3.mother2_${runtype}${appendbeam} $sixtrack_input/fort.3.mother2.tmp
# Clear the flag for check_mad6t
rm -f "$sixtrack_input/CORR_TEST"

#MACRO mymktmpdir mad $sixtrack_input
sixdesktmpdirname=mad
sixdesktmpdirarg=$sixtrack_input
sixdeskmktmpdir
mad=$sixdesktmpdir
#MACRO mymktmp

junktmp=$mad
export junktmp

#MACRO mymess 1 Using junktmp: $junktmp
sixdeskmesslevel=1
sixdeskmess="Using junktmp: $junktmp"
sixdeskmess
#MACRO mymess

cd $junktmp
mad6tjob=$sixdeskhome/utilities/mad6t1.lsf
filejob=$LHCDescrip
cp $sixdeskhome/mask/$filejob.mask .
# Loop over seeds
i=$istamad
while [ $i -le $iendmad ]
do
  # and remove any existing results for this seed
  echo " Case : " $i
  for f in 2 8 16 34
  do
    rm -rf $sixtrack_input/fort.$f"_"$i.gz
  done
  sed -e 's?%NPART?'$bunch_charge'?g' \
      -e 's?%EMIT_BEAM?'$emit_beam'?g' \
      -e 's?%SEEDSYS?'$i'?g' \
      -e 's?%SEEDRAN?'$i'?g' $filejob.mask > $filejob."$i"

  sed -e 's?%SIXJUNKTMP%?'$junktmp'?g' \
      -e 's?%SIXI%?'$i'?g' \
      -e 's?%SIXFILEJOB%?'$filejob'?g' \
      -e 's?%CORR_TEST%?'$CORR_TEST'?g' \
      -e 's?%FORT_34%?'$fort_34'?g' \
      -e 's?%MADX_PATH%?'$MADX_PATH'?g' \
      -e 's?%MADX%?'$MADX'?g' \
      -e 's?%SIXTRACK_INPUT%?'$sixtrack_input'?g' $mad6tjob > mad6t_"$i".lsf
  sleep 2
  chmod 755 mad6t_"$i".lsf
  if test "$inter" = "false"
  then
    bsub -q $madlsfq -o $junktmp/"$LHCDescrip""_mad6t_$i".log -J ${workspace}_${LHCDescrip}_mad6t_$i mad6t_"$i".lsf
  else
    echo "In $PWD"

#MACRO mymktmpdir batch 
    sixdesktmpdirname=batch
    sixdesktmpdirarg=
    sixdeskmktmpdir
    batch=$sixdesktmpdir
#MACRO mymktmp

    cd $batch
    echo "Now in temporary $batch"
    ../mad6t_"$i".lsf | tee $junktmp/"$LHCDescrip""_mad6t_$i".log 2>&1
    mv "$LHCDescrip""_mad6t_$i".log ..
    cd ..
    echo "Removing temporary directory $batch"
    rm -rf $batch
    echo "Back in $PWD" 
  fi
  mad6tjob=$sixdeskhome/utilities/mad6t.lsf
  ((i=i+1))
done
# End loop over seeds
cd $sixdeskhome

#MACRO mymess 0 Appears to have completed normally
sixdeskmesslevel=0
sixdeskmess="Appears to have completed normally"
sixdeskmess
#MACRO mymess


#MACRO myunlock $sixtrack_input
sixdesklockdir=$sixtrack_input
sixdeskunlock
#MACRO myunlock


#MACRO myunlock $sixdeskstudy
sixdesklockdir=$sixdeskstudy
sixdeskunlock
#MACRO myunlock


#MACRO myexit 0
sixdeskexitparam=0
sixdeskexit
#MACRO myexit

