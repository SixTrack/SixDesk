#!/bin/sh
# Does a backup to CASTOR of the current workspace/study
# Should be in run in the directory sixjobs.
# The script can be restarted at any time and will continue.
# The workspace is locked (if the sixdesklock is on it is enough
# to just issue an "unlock").
castorb() 
{
  mymess 0 "Backing up $cin to $cout"
  castor_backup -n $cin $cout >> $sixdeskhome/../castor_backup.log 2>&1
  if test $? -ne 0
  then
    mymess 0 "castor_backup failed!! See castor_backup.log."
    myexit 99
  fi
}
# 
if test "$CASTOR_HOME" = ""
then
  echo "The variable CASTOR_HOME is undefined!!!" 
  echo "Do you have a CASTOR account?" 
  exit 2
fi
cname=$CASTOR_HOME/workspace_backups
# Get the environment and utilities
# Note this will use $1 "study" if specified
if test $# -ne 0
then
  aline=`egrep "^ *export *LHCDescrip=" sixdeskenv | tail -1`
  studyLHCDescrip=`echo "$aline" | sed -e 's/\(.*=\)\([^ ]*\)\(.*\)/\2/'`
  if test $1 != "$studyLHCDescrip"
  then
    # We are not in the correct study
    echo "There is a study mismatch! /$1/ /$studyLHCDescrip"
    echo "Do a set_env $1 and a new backup_study."
    exit 1
  fi
fi
. ./dot_env
mysixdesklogdir=$sixdesklogdir
sixdesklogdir=".."
# Don't backup a deleted study
if test -e studies/$LHCDescrip/deleted
then
  mymess 0 "We do not backup a DELETED study!!!"
  myexit 3
fi
# and go to .. of sixjobs as in backup_workspace
cd ..
sixdesklogdir="."
# Lock the workspace (only one backup at a time)
# Only one backup/recall at a time
mylock
mylock sixjobs
# and lock the study as well
mylock $sixdeskstudy
if test ! -s backup_study.list
then
  # we assume a new backup
  # We have "workspace" "sixdeskstudy" available
  myd=`date +%d%m%y`
  myt=`date +%T`
  bname=${workspace}%$LHCDescrip%${myd}
  mymess 0 "Starting backup of Study:$LHCDescrip to $bname at $myt"
  echo "$bname" > backup_study.finished
  echo "sixjobs" > backup_study.list
  echo "logs" >> backup_study.list
  echo "cronlogs" >> backup_study.list
  echo "track" >> backup_study.list
  echo "sixtrack_input" >> backup_study.list
  echo "work" >> backup_study.list  
  mymess 0 "All of sixjobs and Study $LHCDescrip will be backed up"
  mylist=""
  while read myitem
  do
    mylist="$mylist $myitem"
  done < backup_study.list
  mymess 0 "i.e. $mylist"
else
  # We are restarting a backup
  if test ! -s backup_study.finished
  then
    mymess 0 "Strange: we have a backup_study.list but NO backup_study.finished!!!"
    myunlock $sixdeskstudy
    myunlock sixjobs
    myunlock
    myexit 4
  fi
  bname=`head -1 backup_study.finished`
  mymess 0 "Restarting backup of $workspace/$LHCDescrip to $bname at `date +%d%m%y`/`date +%T`"
  bworkspace=`echo $bname | cut -d"%" -f 1`
  bstudy=`echo $bname | cut -d"%" -f 2`
  bdate=`echo $bname | cut -d"%" -f 3`
  if test "$bworkspace" != "$workspace"
  then
    mymess 0 "BUG: the backup workspace $bworkspace does NOT match $workspace!!!"
    myunlock $sixdeskstudy
    myunlock sixjobs
    myunlock
    myexit 5
  fi
  if test "$bstudy" != "$LHCDescrip"
  then
    # We are not in the correct study
    mymess 0 "There is a study mismatch! $bstudy/$LHCDescrip"
    mymess 0 "There are two options:"
    mymess 0 "1. To continue the interrupted backup of $bstudy"
    mymess 0 "   Issue a set_env $bstudy and a new backup_study."
    mymess 0 "2. To start a new backup of $LHCDescrip"
    mymess 0 "   Issue an rm backup_study.list, an rm backup_study.finished"
    mymess 0 "   and a new backup_study."
    myunlock $sixdeskstudy
    myunlock sixjobs
    myunlock
    myexit 1
  fi
fi
# First do all of sixjobs (remembering links are not followed)
# This will also cover logs from old versions where they are not links.
# Afterwards we do logs, sixtrack_input, track, and work.
while read nextb
do
  grep '^'$nextb'$' backup_study.finished > /dev/null
  if test $? -eq 0
  then
    mymess 0 "Skipping backup of $nextb as it is already completed"
  else
  # we have not finished this case so [re-]start it 
    mymess 0 "Backing up $nextb at `date +%d%m%y`/`date +%T`"
  # First do all of sixjobs (remembering links are not followed)
  # This will also cover logs from old versions where they are not links.
    if test "$nextb" = "sixjobs"
    then
      cin="sixjobs"
      cout=$cname/$bname
      castorb
    elif test "$nextb" = "logs"
    then 
      if test "$mysixdesklogdir" != "" -a -d "$mysixdesklogdir"
      then
        cin=$mysixdesklogdir
        cout=$cname/$bname/logs
        castorb
      else
        mymess 0 "Skipping logs (should be in sixjobs backup)."
      fi
    elif test "$nextb" = "cronlogs"
    then
      if test "$cronlogdir" != "" -a -d "$cronlogdir"
      then
        cin=$cronlogdir
        cout=$cname/$bname/cronlogs
        castorb
      else
        mymess 0 "Skipping cronlogs"
      fi
      # Now we do the various "links" for each study
    elif test "$nextb" = "track"
    then
      if test -d "$sixdesktrack/$LHCDescrip"
      then
        cin=$sixdesktrack/$LHCDescrip
        cout=$cname/$bname/track
        castorb
      else
        mymess 0 "Skipping track $sixdesktrack"
      fi
    elif test "$nextb" = "sixtrack_input"
    then
      if test -d "$sixtrack_input"
      then
        cin=$sixtrack_input
        cout=$cname/$bname/sixtrack_input
        castorb
      else
        mymess 0 "Skipping sixtrack_input $sixdesk_input"
      fi
    elif test "$nextb" = "work"
    then
      if test -d "$sixdeskwork"
      then
        cin=$sixdeskwork
        cout=$cname/$bname/work
        castorb 
      else
        mymess 0 "Skipping work $sixdeskwork"
      fi
    else
      mymess 0 "Unknown netxb: $nextb in backup_study.list!!!"
      myunlock $sixdeskstudy
      myunlock sixjobs
      myunlock
      myexit 6
    fi
    echo "$nextb" >> backup_study.finished
    mymess 0 "$nextb finished `date +%d%m%y` `date +%T`"
  fi
done < backup_study.list 
rm backup_study.list
rm backup_study.finished
mymess 0 "Backup of $workspace/$LHCDescrip to $bname finished"
# and unlock everything
myunlock $sixdeskstudy
myunlock sixjobs
myunlock
myexit 0
